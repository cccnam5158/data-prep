#
#  ============================================================================
#
#  Copyright (C) 2006-2016 Talend Inc. - www.talend.com
#
#  This source code is available under agreement available at
#  https://github.com/Talend/data-prep/blob/master/LICENSE
#
#  You should have received a copy of the agreement
#  along with this program; if not, write to Talend SA
#  9 rue Pages 92150 Suresnes, France
#
#  ============================================================================
#

spring.profiles.active=standalone
# Web server port (0 = random).
server.port=8080

spring.mvc.async.request-timeout=600000

# Service documentation
service.documentation.name=Talend Data Preparation - Data Set Service (DSS)
service.documentation.description=This service exposes operations on data sets.
service.paths=datasets,version

# size limit for dataset in lines (if dataset.lines > limit, dataset is truncated)
dataset.records.limit=30000

# Sets a limit on the number of data sets to be listed
dataset.list.limit=10

# In memory dataset metadata store
#dataset.metadata.store=in-memory
dataset.metadata.store=file
dataset.metadata.store.file.location=/tmp/dataprep/store/datasets/metadata

dataset.imports=hdfs,http,local

# DATA SET CONTENT STORE
#    Values: local
dataset.content.store=file
dataset.content.store.file.location=/tmp/dataprep/store/datasets/content

# USER DATA STORE
#    Values: in-memory, file
#    Example: user.data.store=file
user.data.store=file
user.data.store.file.location=/tmp/dataprep/store/userdata

# Enable global lock
hazelcast.enabled=true

#
# optional technical settings
#
# http.pool.size=50
# http.pool.maxPerRoute=50

# Where DataQuality indexes are extracted:
dataquality.indexes.file.location=${java.io.tmpdir}/tdp/org.talend.dataquality.semantic

# Data quality registry updater configuration
# to activate it set enable to true and fill the kafka and zookeeper
dataquality.semantic.update.enable=true
spring.cloud.stream.kafka.binder.brokers=kafka
spring.cloud.stream.kafka.binder.defaultBrokerPort=9092
spring.cloud.stream.kafka.binder.zkNodes=zookeeper
spring.cloud.stream.kafka.binder.defaultZkPort=2181

spring.cloud.stream.bindings.input.destination=${MESSAGING_DOCUMENT_QUEUE:dictionary}
spring.cloud.stream.bindings.input.content-type=application/x-java-object;type=org.talend.dataquality.semantic.model.DQDocumentAction
spring.cloud.stream.bindings.input.group=${MESSAGING_CATEGORY_GROUP:dictionaryGroup}

spring.cloud.stream.bindings.category.destination=${MESSAGING_CATEGORY_QUEUE:category}
spring.cloud.stream.bindings.category.content-type=application/x-java-object;type=org.talend.dataquality.semantic.model.DQCategoryAction
spring.cloud.stream.bindings.category.group=${MESSAGING_REGEX_GROUP:dictionaryGroup}

spring.cloud.stream.bindings.regEx.destination=${MESSAGING_REGEX_QUEUE:regex}
spring.cloud.stream.bindings.regEx.content-type=application/x-java-object;type=org.talend.dataquality.semantic.model.DQCategoryAction
spring.cloud.stream.bindings.regEx.group=${MESSAGING_REGEX_GROUP:dictionaryGroup}

data.management.lucene.categories.folder=${dataquality.indexes.file.location}/category
data.management.lucene.documents.folder=${dataquality.indexes.file.location}/index/dictionary
data.management.regex.folder=${dataquality.indexes.file.location}/regex

spring.cloud.stream.kafka.binder.configuration.security.protocol=${KAFKA_SECURITY_PROTOCOL:PLAINTEXT}
spring.cloud.stream.kafka.binder.configuration.ssl.truststore.location=${TRUSTSTORE_LOCATION:${user.home}/.ssl/security/client.truststore.jks}
spring.cloud.stream.kafka.binder.configuration.ssl.truststore.password=${TRUSTSTORE_PASSWORD:password}
spring.cloud.stream.kafka.binder.configuration.ssl.keystore.location=${KEYSTORE_LOCATION:${user.home}/.ssl/security/server.keystore.jks}
spring.cloud.stream.kafka.binder.configuration.ssl.keystore.password=${KEYSTORE_PASSWORD:password}
spring.cloud.stream.kafka.binder.configuration.ssl.key.password=${KEYSTORE_KEYPASSWORD:password}
